{"ast":null,"code":"import _objectSpread from \"C:/Users/Abdullah Usama/Desktop/we_project/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { eventMethodCalled } from \"../chunk-TUVJ3GI6.mjs\";\nimport { createDeferredPromise } from \"../chunk-BS4QFUKM.mjs\";\nimport \"../chunk-7FNX7RWY.mjs\";\nimport { ClerkRuntimeError, isClerkAPIResponseError, isClerkRuntimeError } from \"../chunk-DL452J2I.mjs\";\nimport { isReverificationHint, reverificationError } from \"../chunk-5C3LHKBE.mjs\";\nimport { validateReverificationConfig } from \"../chunk-X3VKQCBG.mjs\";\nimport { __export, __reExport } from \"../chunk-7ELT755Q.mjs\";\n\n// src/react/hooks/createContextAndHook.ts\nimport React from \"react\";\nfunction assertContextExists(contextVal, msgOrCtx) {\n  if (!contextVal) {\n    throw typeof msgOrCtx === \"string\" ? new Error(msgOrCtx) : new Error(\"\".concat(msgOrCtx.displayName, \" not found\"));\n  }\n}\nvar createContextAndHook = (displayName, options) => {\n  const {\n    assertCtxFn = assertContextExists\n  } = options || {};\n  const Ctx = React.createContext(void 0);\n  Ctx.displayName = displayName;\n  const useCtx = () => {\n    const ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, \"\".concat(displayName, \" not found\"));\n    return ctx.value;\n  };\n  const useCtxWithoutGuarantee = () => {\n    const ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\n\n// src/react/contexts.tsx\nimport React2 from \"react\";\n\n// src/react/clerk-swr.ts\nvar clerk_swr_exports = {};\n__export(clerk_swr_exports, {\n  SWRConfig: () => SWRConfig,\n  useSWR: () => default2,\n  useSWRInfinite: () => default3\n});\n__reExport(clerk_swr_exports, swr_star);\nimport * as swr_star from \"swr\";\nimport { default as default2, SWRConfig } from \"swr\";\nimport { default as default3 } from \"swr/infinite\";\n\n// src/react/contexts.tsx\nvar [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook(\"ClerkInstanceContext\");\nvar [UserContext, useUserContext] = createContextAndHook(\"UserContext\");\nvar [ClientContext, useClientContext] = createContextAndHook(\"ClientContext\");\nvar [SessionContext, useSessionContext] = createContextAndHook(\"SessionContext\");\nvar OptionsContext = React2.createContext({});\nfunction useOptionsContext() {\n  const context = React2.useContext(OptionsContext);\n  if (context === void 0) {\n    throw new Error(\"useOptions must be used within an OptionsContext\");\n  }\n  return context;\n}\nvar [OrganizationContextInternal, useOrganizationContext] = createContextAndHook(\"OrganizationContext\");\nvar OrganizationProvider = _ref => {\n  let {\n    children,\n    organization,\n    swrConfig\n  } = _ref;\n  return /* @__PURE__ */React2.createElement(SWRConfig, {\n    value: swrConfig\n  }, /* @__PURE__ */React2.createElement(OrganizationContextInternal.Provider, {\n    value: {\n      value: {\n        organization\n      }\n    }\n  }, children));\n};\nfunction useAssertWrappedByClerkProvider(displayNameOrFn) {\n  const ctx = React2.useContext(ClerkInstanceContext);\n  if (!ctx) {\n    if (typeof displayNameOrFn === \"function\") {\n      displayNameOrFn();\n      return;\n    }\n    throw new Error(\"\".concat(displayNameOrFn, \" can only be used within the <ClerkProvider /> component.\\n\\nPossible fixes:\\n1. Ensure that the <ClerkProvider /> is correctly wrapping your application where this component is used.\\n2. Check for multiple versions of the `@clerk/shared` package in your project. Use a tool like `npm ls @clerk/shared` to identify multiple versions, and update your dependencies to only rely on one.\\n\\nLearn more: https://clerk.com/docs/components/clerk-provider\").trim());\n  }\n}\n\n// src/react/hooks/usePagesOrInfinite.ts\nimport { useCallback, useMemo, useRef, useState } from \"react\";\nfunction getDifferentKeys(obj1, obj2) {\n  const keysSet = new Set(Object.keys(obj2));\n  const differentKeysObject = {};\n  for (const key1 of Object.keys(obj1)) {\n    if (!keysSet.has(key1)) {\n      differentKeysObject[key1] = obj1[key1];\n    }\n  }\n  return differentKeysObject;\n}\nvar useWithSafeValues = (params, defaultValues) => {\n  var _a, _b, _c;\n  const shouldUseDefaults = typeof params === \"boolean\" && params;\n  const initialPageRef = useRef(shouldUseDefaults ? defaultValues.initialPage : (_a = params == null ? void 0 : params.initialPage) != null ? _a : defaultValues.initialPage);\n  const pageSizeRef = useRef(shouldUseDefaults ? defaultValues.pageSize : (_b = params == null ? void 0 : params.pageSize) != null ? _b : defaultValues.pageSize);\n  const newObj = {};\n  for (const key of Object.keys(defaultValues)) {\n    newObj[key] = shouldUseDefaults ? defaultValues[key] : (_c = params == null ? void 0 : params[key]) != null ? _c : defaultValues[key];\n  }\n  return _objectSpread(_objectSpread({}, newObj), {}, {\n    initialPage: initialPageRef.current,\n    pageSize: pageSizeRef.current\n  });\n};\nvar cachingSWROptions = {\n  dedupingInterval: 1e3 * 60,\n  focusThrottleInterval: 1e3 * 60 * 2\n};\nvar usePagesOrInfinite = (params, fetcher, config, cacheKeys) => {\n  var _a, _b, _c, _d, _e, _f, _g;\n  const [paginatedPage, setPaginatedPage] = useState((_a = params.initialPage) != null ? _a : 1);\n  const initialPageRef = useRef((_b = params.initialPage) != null ? _b : 1);\n  const pageSizeRef = useRef((_c = params.pageSize) != null ? _c : 10);\n  const enabled = (_d = config.enabled) != null ? _d : true;\n  const triggerInfinite = (_e = config.infinite) != null ? _e : false;\n  const keepPreviousData = (_f = config.keepPreviousData) != null ? _f : false;\n  const pagesCacheKey = _objectSpread(_objectSpread(_objectSpread({}, cacheKeys), params), {}, {\n    initialPage: paginatedPage,\n    pageSize: pageSizeRef.current\n  });\n  const {\n    data: swrData,\n    isValidating: swrIsValidating,\n    isLoading: swrIsLoading,\n    error: swrError,\n    mutate: swrMutate\n  } = default2(!triggerInfinite && !!fetcher && enabled ? pagesCacheKey : null, cacheKeyParams => {\n    const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n    return fetcher == null ? void 0 : fetcher(requestParams);\n  }, _objectSpread({\n    keepPreviousData\n  }, cachingSWROptions));\n  const {\n    data: swrInfiniteData,\n    isLoading: swrInfiniteIsLoading,\n    isValidating: swrInfiniteIsValidating,\n    error: swrInfiniteError,\n    size,\n    setSize,\n    mutate: swrInfiniteMutate\n  } = default3(pageIndex => {\n    if (!triggerInfinite || !enabled) {\n      return null;\n    }\n    return _objectSpread(_objectSpread(_objectSpread({}, params), cacheKeys), {}, {\n      initialPage: initialPageRef.current + pageIndex,\n      pageSize: pageSizeRef.current\n    });\n  }, cacheKeyParams => {\n    const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n    return fetcher == null ? void 0 : fetcher(requestParams);\n  }, cachingSWROptions);\n  const page = useMemo(() => {\n    if (triggerInfinite) {\n      return size;\n    }\n    return paginatedPage;\n  }, [triggerInfinite, size, paginatedPage]);\n  const fetchPage = useCallback(numberOrgFn => {\n    if (triggerInfinite) {\n      void setSize(numberOrgFn);\n      return;\n    }\n    return setPaginatedPage(numberOrgFn);\n  }, [setSize]);\n  const data = useMemo(() => {\n    var _a2, _b2;\n    if (triggerInfinite) {\n      return (_a2 = swrInfiniteData == null ? void 0 : swrInfiniteData.map(a => a == null ? void 0 : a.data).flat()) != null ? _a2 : [];\n    }\n    return (_b2 = swrData == null ? void 0 : swrData.data) != null ? _b2 : [];\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n  const count = useMemo(() => {\n    var _a2, _b2;\n    if (triggerInfinite) {\n      return ((_a2 = swrInfiniteData == null ? void 0 : swrInfiniteData[(swrInfiniteData == null ? void 0 : swrInfiniteData.length) - 1]) == null ? void 0 : _a2.total_count) || 0;\n    }\n    return (_b2 = swrData == null ? void 0 : swrData.total_count) != null ? _b2 : 0;\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n  const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n  const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n  const error = (_g = triggerInfinite ? swrInfiniteError : swrError) != null ? _g : null;\n  const isError = !!error;\n  const fetchNext = useCallback(() => {\n    fetchPage(n => Math.max(0, n + 1));\n  }, [fetchPage]);\n  const fetchPrevious = useCallback(() => {\n    fetchPage(n => Math.max(0, n - 1));\n  }, [fetchPage]);\n  const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n  const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n  const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n  const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n  const setData = triggerInfinite ? value => swrInfiniteMutate(value, {\n    revalidate: false\n  }) : value => swrMutate(value, {\n    revalidate: false\n  });\n  const revalidate = triggerInfinite ? () => swrInfiniteMutate() : () => swrMutate();\n  return {\n    data,\n    count,\n    error,\n    isLoading,\n    isFetching,\n    isError,\n    page,\n    pageCount,\n    fetchPage,\n    fetchNext,\n    fetchPrevious,\n    hasNextPage,\n    hasPreviousPage,\n    // Let the hook return type define this type\n    revalidate,\n    // Let the hook return type define this type\n    setData\n  };\n};\n\n// src/react/hooks/useOrganization.tsx\nvar undefinedPaginatedResource = {\n  data: void 0,\n  count: void 0,\n  error: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: void 0,\n  setData: void 0\n};\nvar useOrganization = params => {\n  var _a;\n  const {\n    domains: domainListParams,\n    membershipRequests: membershipRequestsListParams,\n    memberships: membersListParams,\n    invitations: invitationsListParams\n  } = params || {};\n  useAssertWrappedByClerkProvider(\"useOrganization\");\n  const {\n    organization\n  } = useOrganizationContext();\n  const session = useSessionContext();\n  const domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: void 0\n  });\n  const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const membersSafeValues = useWithSafeValues(membersListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    role: void 0,\n    keepPreviousData: false,\n    infinite: false\n  });\n  const invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: [\"pending\"],\n    keepPreviousData: false,\n    infinite: false\n  });\n  const clerk = useClerkInstanceContext();\n  (_a = clerk.telemetry) == null ? void 0 : _a.record(eventMethodCalled(\"useOrganization\"));\n  const domainParams = typeof domainListParams === \"undefined\" ? void 0 : {\n    initialPage: domainSafeValues.initialPage,\n    pageSize: domainSafeValues.pageSize,\n    enrollmentMode: domainSafeValues.enrollmentMode\n  };\n  const membershipRequestParams = typeof membershipRequestsListParams === \"undefined\" ? void 0 : {\n    initialPage: membershipRequestSafeValues.initialPage,\n    pageSize: membershipRequestSafeValues.pageSize,\n    status: membershipRequestSafeValues.status\n  };\n  const membersParams = typeof membersListParams === \"undefined\" ? void 0 : {\n    initialPage: membersSafeValues.initialPage,\n    pageSize: membersSafeValues.pageSize,\n    role: membersSafeValues.role\n  };\n  const invitationsParams = typeof invitationsListParams === \"undefined\" ? void 0 : {\n    initialPage: invitationsSafeValues.initialPage,\n    pageSize: invitationsSafeValues.pageSize,\n    status: invitationsSafeValues.status\n  };\n  const domains = usePagesOrInfinite(_objectSpread({}, domainParams), organization == null ? void 0 : organization.getDomains, {\n    keepPreviousData: domainSafeValues.keepPreviousData,\n    infinite: domainSafeValues.infinite,\n    enabled: !!domainParams\n  }, {\n    type: \"domains\",\n    organizationId: organization == null ? void 0 : organization.id\n  });\n  const membershipRequests = usePagesOrInfinite(_objectSpread({}, membershipRequestParams), organization == null ? void 0 : organization.getMembershipRequests, {\n    keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n    infinite: membershipRequestSafeValues.infinite,\n    enabled: !!membershipRequestParams\n  }, {\n    type: \"membershipRequests\",\n    organizationId: organization == null ? void 0 : organization.id\n  });\n  const memberships = usePagesOrInfinite(membersParams || {}, organization == null ? void 0 : organization.getMemberships, {\n    keepPreviousData: membersSafeValues.keepPreviousData,\n    infinite: membersSafeValues.infinite,\n    enabled: !!membersParams\n  }, {\n    type: \"members\",\n    organizationId: organization == null ? void 0 : organization.id\n  });\n  const invitations = usePagesOrInfinite(_objectSpread({}, invitationsParams), organization == null ? void 0 : organization.getInvitations, {\n    keepPreviousData: invitationsSafeValues.keepPreviousData,\n    infinite: invitationsSafeValues.infinite,\n    enabled: !!invitationsParams\n  }, {\n    type: \"invitations\",\n    organizationId: organization == null ? void 0 : organization.id\n  });\n  if (organization === void 0) {\n    return {\n      isLoaded: false,\n      organization: void 0,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource\n    };\n  }\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n      memberships: null,\n      invitations: null\n    };\n  }\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource\n    };\n  }\n  return {\n    isLoaded: clerk.loaded,\n    organization,\n    membership: getCurrentOrganizationMembership(session.user.organizationMemberships, organization.id),\n    // your membership in the current org\n    domains,\n    membershipRequests,\n    memberships,\n    invitations\n  };\n};\nfunction getCurrentOrganizationMembership(organizationMemberships, activeOrganizationId) {\n  return organizationMemberships.find(organizationMembership => organizationMembership.organization.id === activeOrganizationId);\n}\n\n// src/react/hooks/useOrganizationList.tsx\nvar undefinedPaginatedResource2 = {\n  data: void 0,\n  count: void 0,\n  error: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: void 0,\n  setData: void 0\n};\nvar useOrganizationList = params => {\n  var _a;\n  const {\n    userMemberships,\n    userInvitations,\n    userSuggestions\n  } = params || {};\n  useAssertWrappedByClerkProvider(\"useOrganizationList\");\n  const userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false\n  });\n  const userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n  (_a = clerk.telemetry) == null ? void 0 : _a.record(eventMethodCalled(\"useOrganizationList\"));\n  const userMembershipsParams = typeof userMemberships === \"undefined\" ? void 0 : {\n    initialPage: userMembershipsSafeValues.initialPage,\n    pageSize: userMembershipsSafeValues.pageSize\n  };\n  const userInvitationsParams = typeof userInvitations === \"undefined\" ? void 0 : {\n    initialPage: userInvitationsSafeValues.initialPage,\n    pageSize: userInvitationsSafeValues.pageSize,\n    status: userInvitationsSafeValues.status\n  };\n  const userSuggestionsParams = typeof userSuggestions === \"undefined\" ? void 0 : {\n    initialPage: userSuggestionsSafeValues.initialPage,\n    pageSize: userSuggestionsSafeValues.pageSize,\n    status: userSuggestionsSafeValues.status\n  };\n  const isClerkLoaded = !!(clerk.loaded && user);\n  const memberships = usePagesOrInfinite(userMembershipsParams || {}, user == null ? void 0 : user.getOrganizationMemberships, {\n    keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n    infinite: userMembershipsSafeValues.infinite,\n    enabled: !!userMembershipsParams\n  }, {\n    type: \"userMemberships\",\n    userId: user == null ? void 0 : user.id\n  });\n  const invitations = usePagesOrInfinite(_objectSpread({}, userInvitationsParams), user == null ? void 0 : user.getOrganizationInvitations, {\n    keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n    infinite: userInvitationsSafeValues.infinite,\n    enabled: !!userInvitationsParams\n  }, {\n    type: \"userInvitations\",\n    userId: user == null ? void 0 : user.id\n  });\n  const suggestions = usePagesOrInfinite(_objectSpread({}, userSuggestionsParams), user == null ? void 0 : user.getOrganizationSuggestions, {\n    keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n    infinite: userSuggestionsSafeValues.infinite,\n    enabled: !!userSuggestionsParams\n  }, {\n    type: \"userSuggestions\",\n    userId: user == null ? void 0 : user.id\n  });\n  if (!isClerkLoaded) {\n    return {\n      isLoaded: false,\n      createOrganization: void 0,\n      setActive: void 0,\n      userMemberships: undefinedPaginatedResource2,\n      userInvitations: undefinedPaginatedResource2,\n      userSuggestions: undefinedPaginatedResource2\n    };\n  }\n  return {\n    isLoaded: isClerkLoaded,\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n    userMemberships: memberships,\n    userInvitations: invitations,\n    userSuggestions: suggestions\n  };\n};\n\n// src/react/hooks/useSafeLayoutEffect.tsx\nimport React3 from \"react\";\nvar useSafeLayoutEffect = typeof window !== \"undefined\" ? React3.useLayoutEffect : React3.useEffect;\n\n// src/react/hooks/useSession.ts\nvar useSession = () => {\n  useAssertWrappedByClerkProvider(\"useSession\");\n  const session = useSessionContext();\n  if (session === void 0) {\n    return {\n      isLoaded: false,\n      isSignedIn: void 0,\n      session: void 0\n    };\n  }\n  if (session === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      session: null\n    };\n  }\n  return {\n    isLoaded: true,\n    isSignedIn: true,\n    session\n  };\n};\n\n// src/react/hooks/useSessionList.ts\nvar useSessionList = () => {\n  useAssertWrappedByClerkProvider(\"useSessionList\");\n  const isomorphicClerk = useClerkInstanceContext();\n  const client = useClientContext();\n  if (!client) {\n    return {\n      isLoaded: false,\n      sessions: void 0,\n      setActive: void 0\n    };\n  }\n  return {\n    isLoaded: true,\n    sessions: client.sessions,\n    setActive: isomorphicClerk.setActive\n  };\n};\n\n// src/react/hooks/useUser.ts\nfunction useUser() {\n  useAssertWrappedByClerkProvider(\"useUser\");\n  const user = useUserContext();\n  if (user === void 0) {\n    return {\n      isLoaded: false,\n      isSignedIn: void 0,\n      user: void 0\n    };\n  }\n  if (user === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      user: null\n    };\n  }\n  return {\n    isLoaded: true,\n    isSignedIn: true,\n    user\n  };\n}\n\n// src/react/hooks/useClerk.ts\nvar useClerk = () => {\n  useAssertWrappedByClerkProvider(\"useClerk\");\n  return useClerkInstanceContext();\n};\n\n// src/react/hooks/useDeepEqualMemo.ts\nimport { dequal as deepEqual } from \"dequal\";\nimport React4 from \"react\";\nvar useDeepEqualMemoize = value => {\n  const ref = React4.useRef(value);\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n  return React4.useMemo(() => ref.current, [ref.current]);\n};\nvar useDeepEqualMemo = (factory, dependencyArray) => {\n  return React4.useMemo(factory, useDeepEqualMemoize(dependencyArray));\n};\nvar isDeeplyEqual = deepEqual;\n\n// src/react/hooks/useReverification.ts\nimport { useMemo as useMemo2, useRef as useRef2 } from \"react\";\nvar CLERK_API_REVERIFICATION_ERROR_CODE = \"session_reverification_required\";\nasync function resolveResult(result) {\n  try {\n    const r = await result;\n    if (r instanceof Response) {\n      return r.json();\n    }\n    return r;\n  } catch (e) {\n    if (isClerkAPIResponseError(e) && e.errors.find(_ref2 => {\n      let {\n        code\n      } = _ref2;\n      return code === CLERK_API_REVERIFICATION_ERROR_CODE;\n    })) {\n      return reverificationError();\n    }\n    throw e;\n  }\n}\nfunction createReverificationHandler(params) {\n  function assertReverification(fetcher) {\n    return async function () {\n      var _a, _b;\n      let result = await resolveResult(fetcher(...arguments));\n      if (isReverificationHint(result)) {\n        const resolvers = createDeferredPromise();\n        const isValidMetadata = validateReverificationConfig((_a = result.clerk_error.metadata) == null ? void 0 : _a.reverification);\n        (_b = params.openUIComponent) == null ? void 0 : _b.call(params, {\n          level: isValidMetadata ? isValidMetadata().level : void 0,\n          afterVerification() {\n            resolvers.resolve(true);\n          },\n          afterVerificationCancelled() {\n            resolvers.reject(new ClerkRuntimeError(\"User cancelled attempted verification\", {\n              code: \"reverification_cancelled\"\n            }));\n          }\n        });\n        try {\n          await resolvers.promise;\n        } catch (e) {\n          if (params.onCancel) {\n            params.onCancel();\n          }\n          if (isClerkRuntimeError(e) && e.code === \"reverification_cancelled\" && params.throwOnCancel) {\n            throw e;\n          }\n          return null;\n        }\n        result = await resolveResult(fetcher(...arguments));\n      }\n      return result;\n    };\n  }\n  return assertReverification;\n}\nfunction useReverification(fetcher, options) {\n  const {\n    __internal_openReverification\n  } = useClerk();\n  const fetcherRef = useRef2(fetcher);\n  const optionsRef = useRef2(options);\n  const handleReverification = useMemo2(() => {\n    const handler = createReverificationHandler(_objectSpread({\n      openUIComponent: __internal_openReverification\n    }, optionsRef.current))(fetcherRef.current);\n    return [handler];\n  }, [__internal_openReverification, fetcherRef.current, optionsRef.current]);\n  useSafeLayoutEffect(() => {\n    fetcherRef.current = fetcher;\n    optionsRef.current = options;\n  });\n  return handleReverification;\n}\nexport { ClerkInstanceContext, ClientContext, OptionsContext, OrganizationProvider, SessionContext, UserContext, assertContextExists, createContextAndHook, isDeeplyEqual, useAssertWrappedByClerkProvider, useClerk, useClerkInstanceContext, useClientContext, useDeepEqualMemo, useOptionsContext, useOrganization, useOrganizationContext, useOrganizationList, useReverification, useSafeLayoutEffect, useSession, useSessionContext, useSessionList, useUser, useUserContext };","map":{"version":3,"names":["React","assertContextExists","contextVal","msgOrCtx","Error","concat","displayName","createContextAndHook","options","assertCtxFn","Ctx","createContext","useCtx","ctx","useContext","value","useCtxWithoutGuarantee","React2","clerk_swr_exports","__export","SWRConfig","useSWR","default2","useSWRInfinite","default3","__reExport","swr_star","default","ClerkInstanceContext","useClerkInstanceContext","UserContext","useUserContext","ClientContext","useClientContext","SessionContext","useSessionContext","OptionsContext","useOptionsContext","context","OrganizationContextInternal","useOrganizationContext","OrganizationProvider","_ref","children","organization","swrConfig","createElement","Provider","useAssertWrappedByClerkProvider","displayNameOrFn","trim","useCallback","useMemo","useRef","useState","getDifferentKeys","obj1","obj2","keysSet","Set","Object","keys","differentKeysObject","key1","has","useWithSafeValues","params","defaultValues","_a","_b","_c","shouldUseDefaults","initialPageRef","initialPage","pageSizeRef","pageSize","newObj","key","_objectSpread","current","cachingSWROptions","dedupingInterval","focusThrottleInterval","usePagesOrInfinite","fetcher","config","cacheKeys","_d","_e","_f","_g","paginatedPage","setPaginatedPage","enabled","triggerInfinite","infinite","keepPreviousData","pagesCacheKey","data","swrData","isValidating","swrIsValidating","isLoading","swrIsLoading","error","swrError","mutate","swrMutate","cacheKeyParams","requestParams","swrInfiniteData","swrInfiniteIsLoading","swrInfiniteIsValidating","swrInfiniteError","size","setSize","swrInfiniteMutate","pageIndex","page","fetchPage","numberOrgFn","_a2","_b2","map","a","flat","count","length","total_count","isFetching","isError","fetchNext","n","Math","max","fetchPrevious","offsetCount","pageCount","ceil","hasNextPage","hasPreviousPage","setData","revalidate","undefinedPaginatedResource","useOrganization","domains","domainListParams","membershipRequests","membershipRequestsListParams","memberships","membersListParams","invitations","invitationsListParams","session","domainSafeValues","enrollmentMode","membershipRequestSafeValues","status","membersSafeValues","role","invitationsSafeValues","clerk","telemetry","record","eventMethodCalled","domainParams","membershipRequestParams","membersParams","invitationsParams","getDomains","type","organizationId","id","getMembershipRequests","getMemberships","getInvitations","isLoaded","membership","loaded","getCurrentOrganizationMembership","user","organizationMemberships","activeOrganizationId","find","organizationMembership","undefinedPaginatedResource2","useOrganizationList","userMemberships","userInvitations","userSuggestions","userMembershipsSafeValues","userInvitationsSafeValues","userSuggestionsSafeValues","userMembershipsParams","userInvitationsParams","userSuggestionsParams","isClerkLoaded","getOrganizationMemberships","userId","getOrganizationInvitations","suggestions","getOrganizationSuggestions","createOrganization","setActive","React3","useSafeLayoutEffect","window","useLayoutEffect","useEffect","useSession","isSignedIn","useSessionList","isomorphicClerk","client","sessions","useUser","useClerk","dequal","deepEqual","React4","useDeepEqualMemoize","ref","useDeepEqualMemo","factory","dependencyArray","isDeeplyEqual","useMemo2","useRef2","CLERK_API_REVERIFICATION_ERROR_CODE","resolveResult","result","r","Response","json","e","isClerkAPIResponseError","errors","_ref2","code","reverificationError","createReverificationHandler","assertReverification","arguments","isReverificationHint","resolvers","createDeferredPromise","isValidMetadata","validateReverificationConfig","clerk_error","metadata","reverification","openUIComponent","call","level","afterVerification","resolve","afterVerificationCancelled","reject","ClerkRuntimeError","promise","onCancel","isClerkRuntimeError","throwOnCancel","useReverification","__internal_openReverification","fetcherRef","optionsRef","handleReverification","handler"],"sources":["C:\\Users\\Abdullah Usama\\Desktop\\we_project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\createContextAndHook.ts","C:\\Users\\Abdullah Usama\\Desktop\\we_project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\contexts.tsx","C:\\Users\\Abdullah Usama\\Desktop\\we_project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\clerk-swr.ts","C:\\Users\\Abdullah Usama\\Desktop\\we_project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\usePagesOrInfinite.ts","C:\\Users\\Abdullah Usama\\Desktop\\we_project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useOrganization.tsx","C:\\Users\\Abdullah Usama\\Desktop\\we_project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useOrganizationList.tsx","C:\\Users\\Abdullah Usama\\Desktop\\we_project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useSafeLayoutEffect.tsx","C:\\Users\\Abdullah Usama\\Desktop\\we_project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useSession.ts","C:\\Users\\Abdullah Usama\\Desktop\\we_project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useSessionList.ts","C:\\Users\\Abdullah Usama\\Desktop\\we_project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useUser.ts","C:\\Users\\Abdullah Usama\\Desktop\\we_project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useClerk.ts","C:\\Users\\Abdullah Usama\\Desktop\\we_project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useDeepEqualMemo.ts","C:\\Users\\Abdullah Usama\\Desktop\\we_project\\frontend\\node_modules\\@clerk\\shared\\src\\react\\hooks\\useReverification.ts"],"sourcesContent":["'use client';\nimport React from 'react';\n\nexport function assertContextExists(contextVal: unknown, msgOrCtx: string | React.Context<any>): asserts contextVal {\n  if (!contextVal) {\n    throw typeof msgOrCtx === 'string' ? new Error(msgOrCtx) : new Error(`${msgOrCtx.displayName} not found`);\n  }\n}\n\ntype Options = { assertCtxFn?: (v: unknown, msg: string) => void };\ntype ContextOf<T> = React.Context<{ value: T } | undefined>;\ntype UseCtxFn<T> = () => T;\n\n/**\n * Creates and returns a Context and two hooks that return the context value.\n * The Context type is derived from the type passed in by the user.\n * The first hook returned guarantees that the context exists so the returned value is always CtxValue\n * The second hook makes no guarantees, so the returned value can be CtxValue | undefined\n */\nexport const createContextAndHook = <CtxVal>(\n  displayName: string,\n  options?: Options,\n): [ContextOf<CtxVal>, UseCtxFn<CtxVal>, UseCtxFn<CtxVal | Partial<CtxVal>>] => {\n  const { assertCtxFn = assertContextExists } = options || {};\n  const Ctx = React.createContext<{ value: CtxVal } | undefined>(undefined);\n  Ctx.displayName = displayName;\n\n  const useCtx = () => {\n    const ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, `${displayName} not found`);\n    return (ctx as any).value as CtxVal;\n  };\n\n  const useCtxWithoutGuarantee = () => {\n    const ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\n","'use client';\n\nimport type {\n  ActiveSessionResource,\n  ClerkOptions,\n  ClientResource,\n  LoadedClerk,\n  OrganizationResource,\n  UserResource,\n} from '@clerk/types';\nimport type { PropsWithChildren } from 'react';\nimport React from 'react';\n\nimport { SWRConfig } from './clerk-swr';\nimport { createContextAndHook } from './hooks/createContextAndHook';\n\nconst [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook<LoadedClerk>('ClerkInstanceContext');\nconst [UserContext, useUserContext] = createContextAndHook<UserResource | null | undefined>('UserContext');\nconst [ClientContext, useClientContext] = createContextAndHook<ClientResource | null | undefined>('ClientContext');\nconst [SessionContext, useSessionContext] = createContextAndHook<ActiveSessionResource | null | undefined>(\n  'SessionContext',\n);\n\nconst OptionsContext = React.createContext<ClerkOptions>({});\n\nfunction useOptionsContext(): ClerkOptions {\n  const context = React.useContext(OptionsContext);\n  if (context === undefined) {\n    throw new Error('useOptions must be used within an OptionsContext');\n  }\n  return context;\n}\n\ntype OrganizationContextProps = {\n  organization: OrganizationResource | null | undefined;\n};\nconst [OrganizationContextInternal, useOrganizationContext] = createContextAndHook<{\n  organization: OrganizationResource | null | undefined;\n}>('OrganizationContext');\n\nconst OrganizationProvider = ({\n  children,\n  organization,\n  swrConfig,\n}: PropsWithChildren<\n  OrganizationContextProps & {\n    // Exporting inferred types  directly from SWR will result in error while building declarations\n    swrConfig?: any;\n  }\n>) => {\n  return (\n    <SWRConfig value={swrConfig}>\n      <OrganizationContextInternal.Provider\n        value={{\n          value: { organization },\n        }}\n      >\n        {children}\n      </OrganizationContextInternal.Provider>\n    </SWRConfig>\n  );\n};\n\nfunction useAssertWrappedByClerkProvider(displayNameOrFn: string | (() => void)): void {\n  const ctx = React.useContext(ClerkInstanceContext);\n\n  if (!ctx) {\n    if (typeof displayNameOrFn === 'function') {\n      displayNameOrFn();\n      return;\n    }\n\n    throw new Error(\n      `${displayNameOrFn} can only be used within the <ClerkProvider /> component.\n\nPossible fixes:\n1. Ensure that the <ClerkProvider /> is correctly wrapping your application where this component is used.\n2. Check for multiple versions of the \\`@clerk/shared\\` package in your project. Use a tool like \\`npm ls @clerk/shared\\` to identify multiple versions, and update your dependencies to only rely on one.\n\nLearn more: https://clerk.com/docs/components/clerk-provider`.trim(),\n    );\n  }\n}\n\nexport {\n  ClientContext,\n  useClientContext,\n  OrganizationProvider,\n  useOrganizationContext,\n  UserContext,\n  OptionsContext,\n  useOptionsContext,\n  useUserContext,\n  SessionContext,\n  useSessionContext,\n  ClerkInstanceContext,\n  useClerkInstanceContext,\n  useAssertWrappedByClerkProvider,\n};\n","'use client';\n// eslint-disable-next-line import/export\nexport * from 'swr';\n// eslint-disable-next-line import/export\nexport { default as useSWR, SWRConfig } from 'swr';\nexport { default as useSWRInfinite } from 'swr/infinite';\n","'use client';\n\nimport { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { useSWR, useSWRInfinite } from '../clerk-swr';\nimport type {\n  CacheSetter,\n  PagesOrInfiniteConfig,\n  PagesOrInfiniteOptions,\n  PaginatedResources,\n  ValueOrSetter,\n} from '../types';\n\nfunction getDifferentKeys(obj1: Record<string, unknown>, obj2: Record<string, unknown>): Record<string, unknown> {\n  const keysSet = new Set(Object.keys(obj2));\n  const differentKeysObject: Record<string, unknown> = {};\n\n  for (const key1 of Object.keys(obj1)) {\n    if (!keysSet.has(key1)) {\n      differentKeysObject[key1] = obj1[key1];\n    }\n  }\n\n  return differentKeysObject;\n}\n\nexport const useWithSafeValues = <T extends PagesOrInfiniteOptions>(params: T | true | undefined, defaultValues: T) => {\n  const shouldUseDefaults = typeof params === 'boolean' && params;\n\n  // Cache initialPage and initialPageSize until unmount\n  const initialPageRef = useRef(\n    shouldUseDefaults ? defaultValues.initialPage : (params?.initialPage ?? defaultValues.initialPage),\n  );\n  const pageSizeRef = useRef(shouldUseDefaults ? defaultValues.pageSize : (params?.pageSize ?? defaultValues.pageSize));\n\n  const newObj: Record<string, unknown> = {};\n  for (const key of Object.keys(defaultValues)) {\n    // @ts-ignore\n    newObj[key] = shouldUseDefaults ? defaultValues[key] : (params?.[key] ?? defaultValues[key]);\n  }\n\n  return {\n    ...newObj,\n    initialPage: initialPageRef.current,\n    pageSize: pageSizeRef.current,\n  } as T;\n};\n\nconst cachingSWROptions = {\n  dedupingInterval: 1000 * 60,\n  focusThrottleInterval: 1000 * 60 * 2,\n} satisfies Parameters<typeof useSWR>[2];\n\ntype ArrayType<DataArray> = DataArray extends Array<infer ElementType> ? ElementType : never;\ntype ExtractData<Type> = Type extends { data: infer Data } ? ArrayType<Data> : Type;\n\ntype UsePagesOrInfinite = <\n  Params extends PagesOrInfiniteOptions,\n  FetcherReturnData extends Record<string, any>,\n  CacheKeys = Record<string, unknown>,\n  TConfig extends PagesOrInfiniteConfig = PagesOrInfiniteConfig,\n>(\n  /**\n   * The parameters will be passed to the fetcher\n   */\n  params: Params,\n  /**\n   * A Promise returning function to fetch your data\n   */\n  fetcher: ((p: Params) => FetcherReturnData | Promise<FetcherReturnData>) | undefined,\n  /**\n   * Internal configuration of the hook\n   */\n  config: TConfig,\n  cacheKeys: CacheKeys,\n) => PaginatedResources<ExtractData<FetcherReturnData>, TConfig['infinite']>;\n\nexport const usePagesOrInfinite: UsePagesOrInfinite = (params, fetcher, config, cacheKeys) => {\n  const [paginatedPage, setPaginatedPage] = useState(params.initialPage ?? 1);\n\n  // Cache initialPage and initialPageSize until unmount\n  const initialPageRef = useRef(params.initialPage ?? 1);\n  const pageSizeRef = useRef(params.pageSize ?? 10);\n\n  const enabled = config.enabled ?? true;\n  const triggerInfinite = config.infinite ?? false;\n  const keepPreviousData = config.keepPreviousData ?? false;\n\n  const pagesCacheKey = {\n    ...cacheKeys,\n    ...params,\n    initialPage: paginatedPage,\n    pageSize: pageSizeRef.current,\n  };\n\n  const {\n    data: swrData,\n    isValidating: swrIsValidating,\n    isLoading: swrIsLoading,\n    error: swrError,\n    mutate: swrMutate,\n  } = useSWR(\n    !triggerInfinite && !!fetcher && enabled ? pagesCacheKey : null,\n    cacheKeyParams => {\n      // @ts-ignore\n      const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      // @ts-ignore\n      return fetcher?.(requestParams);\n    },\n    { keepPreviousData, ...cachingSWROptions },\n  );\n\n  const {\n    data: swrInfiniteData,\n    isLoading: swrInfiniteIsLoading,\n    isValidating: swrInfiniteIsValidating,\n    error: swrInfiniteError,\n    size,\n    setSize,\n    mutate: swrInfiniteMutate,\n  } = useSWRInfinite(\n    pageIndex => {\n      if (!triggerInfinite || !enabled) {\n        return null;\n      }\n\n      return {\n        ...params,\n        ...cacheKeys,\n        initialPage: initialPageRef.current + pageIndex,\n        pageSize: pageSizeRef.current,\n      };\n    },\n    cacheKeyParams => {\n      // @ts-ignore\n      const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n      // @ts-ignore\n      return fetcher?.(requestParams);\n    },\n    cachingSWROptions,\n  );\n\n  const page = useMemo(() => {\n    if (triggerInfinite) {\n      return size;\n    }\n    return paginatedPage;\n  }, [triggerInfinite, size, paginatedPage]);\n\n  const fetchPage: ValueOrSetter<number> = useCallback(\n    numberOrgFn => {\n      if (triggerInfinite) {\n        void setSize(numberOrgFn);\n        return;\n      }\n      return setPaginatedPage(numberOrgFn);\n    },\n    [setSize],\n  );\n\n  const data = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.map(a => a?.data).flat() ?? [];\n    }\n    return swrData?.data ?? [];\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n\n  const count = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.[swrInfiniteData?.length - 1]?.total_count || 0;\n    }\n    return swrData?.total_count ?? 0;\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n\n  const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n  const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n  const error = (triggerInfinite ? swrInfiniteError : swrError) ?? null;\n  const isError = !!error;\n  /**\n   * Helpers\n   */\n  const fetchNext = useCallback(() => {\n    fetchPage(n => Math.max(0, n + 1));\n  }, [fetchPage]);\n\n  const fetchPrevious = useCallback(() => {\n    fetchPage(n => Math.max(0, n - 1));\n  }, [fetchPage]);\n\n  const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n\n  const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n  const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n  const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n\n  const setData: CacheSetter = triggerInfinite\n    ? value =>\n        swrInfiniteMutate(value, {\n          revalidate: false,\n        })\n    : value =>\n        swrMutate(value, {\n          revalidate: false,\n        });\n\n  const revalidate = triggerInfinite ? () => swrInfiniteMutate() : () => swrMutate();\n\n  return {\n    data,\n    count,\n    error,\n    isLoading,\n    isFetching,\n    isError,\n    page,\n    pageCount,\n    fetchPage,\n    fetchNext,\n    fetchPrevious,\n    hasNextPage,\n    hasPreviousPage,\n    // Let the hook return type define this type\n    revalidate: revalidate as any,\n    // Let the hook return type define this type\n    setData: setData as any,\n  };\n};\n","import type {\n  ClerkPaginatedResponse,\n  GetDomainsParams,\n  GetInvitationsParams,\n  GetMembershipRequestParams,\n  GetMembersParams,\n  OrganizationDomainResource,\n  OrganizationInvitationResource,\n  OrganizationMembershipRequestResource,\n  OrganizationMembershipResource,\n  OrganizationResource,\n} from '@clerk/types';\n\nimport { eventMethodCalled } from '../../telemetry/events/method-called';\nimport {\n  useAssertWrappedByClerkProvider,\n  useClerkInstanceContext,\n  useOrganizationContext,\n  useSessionContext,\n} from '../contexts';\nimport type { PaginatedHookConfig, PaginatedResources, PaginatedResourcesWithDefault } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\ntype UseOrganizationParams = {\n  domains?: true | PaginatedHookConfig<GetDomainsParams>;\n  membershipRequests?: true | PaginatedHookConfig<GetMembershipRequestParams>;\n  memberships?: true | PaginatedHookConfig<GetMembersParams>;\n  invitations?: true | PaginatedHookConfig<GetInvitationsParams>;\n};\n\ntype UseOrganization = <T extends UseOrganizationParams>(\n  params?: T,\n) =>\n  | {\n      isLoaded: false;\n      organization: undefined;\n      membership: undefined;\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n      memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;\n    }\n  | {\n      isLoaded: true;\n      organization: OrganizationResource;\n      membership: undefined;\n      domains: PaginatedResourcesWithDefault<OrganizationDomainResource>;\n      membershipRequests: PaginatedResourcesWithDefault<OrganizationMembershipRequestResource>;\n      memberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      invitations: PaginatedResourcesWithDefault<OrganizationInvitationResource>;\n    }\n  | {\n      isLoaded: boolean;\n      organization: OrganizationResource | null;\n      membership: OrganizationMembershipResource | null | undefined;\n      domains: PaginatedResources<\n        OrganizationDomainResource,\n        T['membershipRequests'] extends { infinite: true } ? true : false\n      > | null;\n      membershipRequests: PaginatedResources<\n        OrganizationMembershipRequestResource,\n        T['membershipRequests'] extends { infinite: true } ? true : false\n      > | null;\n      memberships: PaginatedResources<\n        OrganizationMembershipResource,\n        T['memberships'] extends { infinite: true } ? true : false\n      > | null;\n      invitations: PaginatedResources<\n        OrganizationInvitationResource,\n        T['invitations'] extends { infinite: true } ? true : false\n      > | null;\n    };\n\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  error: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: undefined,\n  setData: undefined,\n} as const;\n\nexport const useOrganization: UseOrganization = params => {\n  const {\n    domains: domainListParams,\n    membershipRequests: membershipRequestsListParams,\n    memberships: membersListParams,\n    invitations: invitationsListParams,\n  } = params || {};\n\n  useAssertWrappedByClerkProvider('useOrganization');\n\n  const { organization } = useOrganizationContext();\n  const session = useSessionContext();\n\n  const domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: undefined,\n  });\n\n  const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const membersSafeValues = useWithSafeValues(membersListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    role: undefined,\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: ['pending'],\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n\n  clerk.telemetry?.record(eventMethodCalled('useOrganization'));\n\n  const domainParams =\n    typeof domainListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: domainSafeValues.initialPage,\n          pageSize: domainSafeValues.pageSize,\n          enrollmentMode: domainSafeValues.enrollmentMode,\n        };\n\n  const membershipRequestParams =\n    typeof membershipRequestsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membershipRequestSafeValues.initialPage,\n          pageSize: membershipRequestSafeValues.pageSize,\n          status: membershipRequestSafeValues.status,\n        };\n\n  const membersParams =\n    typeof membersListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: membersSafeValues.initialPage,\n          pageSize: membersSafeValues.pageSize,\n          role: membersSafeValues.role,\n        };\n\n  const invitationsParams =\n    typeof invitationsListParams === 'undefined'\n      ? undefined\n      : {\n          initialPage: invitationsSafeValues.initialPage,\n          pageSize: invitationsSafeValues.pageSize,\n          status: invitationsSafeValues.status,\n        };\n\n  const domains = usePagesOrInfinite<GetDomainsParams, ClerkPaginatedResponse<OrganizationDomainResource>>(\n    {\n      ...domainParams,\n    },\n    organization?.getDomains,\n    {\n      keepPreviousData: domainSafeValues.keepPreviousData,\n      infinite: domainSafeValues.infinite,\n      enabled: !!domainParams,\n    },\n    {\n      type: 'domains',\n      organizationId: organization?.id,\n    },\n  );\n\n  const membershipRequests = usePagesOrInfinite<\n    GetMembershipRequestParams,\n    ClerkPaginatedResponse<OrganizationMembershipRequestResource>\n  >(\n    {\n      ...membershipRequestParams,\n    },\n    organization?.getMembershipRequests,\n    {\n      keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n      infinite: membershipRequestSafeValues.infinite,\n      enabled: !!membershipRequestParams,\n    },\n    {\n      type: 'membershipRequests',\n      organizationId: organization?.id,\n    },\n  );\n\n  const memberships = usePagesOrInfinite<GetMembersParams, ClerkPaginatedResponse<OrganizationMembershipResource>>(\n    membersParams || {},\n    organization?.getMemberships,\n    {\n      keepPreviousData: membersSafeValues.keepPreviousData,\n      infinite: membersSafeValues.infinite,\n      enabled: !!membersParams,\n    },\n    {\n      type: 'members',\n      organizationId: organization?.id,\n    },\n  );\n\n  const invitations = usePagesOrInfinite<GetInvitationsParams, ClerkPaginatedResponse<OrganizationInvitationResource>>(\n    {\n      ...invitationsParams,\n    },\n    organization?.getInvitations,\n    {\n      keepPreviousData: invitationsSafeValues.keepPreviousData,\n      infinite: invitationsSafeValues.infinite,\n      enabled: !!invitationsParams,\n    },\n    {\n      type: 'invitations',\n      organizationId: organization?.id,\n    },\n  );\n\n  if (organization === undefined) {\n    return {\n      isLoaded: false,\n      organization: undefined,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n    };\n  }\n\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n      memberships: null,\n      invitations: null,\n    };\n  }\n\n  /** In SSR context we include only the organization object when loadOrg is set to true. */\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization,\n      membership: undefined,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n    };\n  }\n\n  return {\n    isLoaded: clerk.loaded,\n    organization,\n    membership: getCurrentOrganizationMembership(session!.user.organizationMemberships, organization.id), // your membership in the current org\n    domains,\n    membershipRequests,\n    memberships,\n    invitations,\n  };\n};\n\nfunction getCurrentOrganizationMembership(\n  organizationMemberships: OrganizationMembershipResource[],\n  activeOrganizationId: string,\n) {\n  return organizationMemberships.find(\n    organizationMembership => organizationMembership.organization.id === activeOrganizationId,\n  );\n}\n","import type {\n  ClerkPaginatedResponse,\n  CreateOrganizationParams,\n  GetUserOrganizationInvitationsParams,\n  GetUserOrganizationMembershipParams,\n  GetUserOrganizationSuggestionsParams,\n  OrganizationMembershipResource,\n  OrganizationResource,\n  OrganizationSuggestionResource,\n  SetActive,\n  UserOrganizationInvitationResource,\n} from '@clerk/types';\n\nimport { eventMethodCalled } from '../../telemetry/events/method-called';\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext, useUserContext } from '../contexts';\nimport type { PaginatedHookConfig, PaginatedResources, PaginatedResourcesWithDefault } from '../types';\nimport { usePagesOrInfinite, useWithSafeValues } from './usePagesOrInfinite';\n\ntype UseOrganizationListParams = {\n  userMemberships?: true | PaginatedHookConfig<GetUserOrganizationMembershipParams>;\n  userInvitations?: true | PaginatedHookConfig<GetUserOrganizationInvitationsParams>;\n  userSuggestions?: true | PaginatedHookConfig<GetUserOrganizationSuggestionsParams>;\n};\n\nconst undefinedPaginatedResource = {\n  data: undefined,\n  count: undefined,\n  error: undefined,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: undefined,\n  pageCount: undefined,\n  fetchPage: undefined,\n  fetchNext: undefined,\n  fetchPrevious: undefined,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: undefined,\n  setData: undefined,\n} as const;\n\ntype UseOrganizationList = <T extends UseOrganizationListParams>(\n  params?: T,\n) =>\n  | {\n      isLoaded: false;\n      createOrganization: undefined;\n      setActive: undefined;\n      userMemberships: PaginatedResourcesWithDefault<OrganizationMembershipResource>;\n      userInvitations: PaginatedResourcesWithDefault<UserOrganizationInvitationResource>;\n      userSuggestions: PaginatedResourcesWithDefault<OrganizationSuggestionResource>;\n    }\n  | {\n      isLoaded: boolean;\n      createOrganization: (params: CreateOrganizationParams) => Promise<OrganizationResource>;\n      setActive: SetActive;\n      userMemberships: PaginatedResources<\n        OrganizationMembershipResource,\n        T['userMemberships'] extends { infinite: true } ? true : false\n      >;\n      userInvitations: PaginatedResources<\n        UserOrganizationInvitationResource,\n        T['userInvitations'] extends { infinite: true } ? true : false\n      >;\n      userSuggestions: PaginatedResources<\n        OrganizationSuggestionResource,\n        T['userSuggestions'] extends { infinite: true } ? true : false\n      >;\n    };\n\nexport const useOrganizationList: UseOrganizationList = params => {\n  const { userMemberships, userInvitations, userSuggestions } = params || {};\n\n  useAssertWrappedByClerkProvider('useOrganizationList');\n\n  const userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n    initialPage: 1,\n    pageSize: 10,\n    status: 'pending',\n    keepPreviousData: false,\n    infinite: false,\n  });\n\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n\n  clerk.telemetry?.record(eventMethodCalled('useOrganizationList'));\n\n  const userMembershipsParams =\n    typeof userMemberships === 'undefined'\n      ? undefined\n      : {\n          initialPage: userMembershipsSafeValues.initialPage,\n          pageSize: userMembershipsSafeValues.pageSize,\n        };\n\n  const userInvitationsParams =\n    typeof userInvitations === 'undefined'\n      ? undefined\n      : {\n          initialPage: userInvitationsSafeValues.initialPage,\n          pageSize: userInvitationsSafeValues.pageSize,\n          status: userInvitationsSafeValues.status,\n        };\n\n  const userSuggestionsParams =\n    typeof userSuggestions === 'undefined'\n      ? undefined\n      : {\n          initialPage: userSuggestionsSafeValues.initialPage,\n          pageSize: userSuggestionsSafeValues.pageSize,\n          status: userSuggestionsSafeValues.status,\n        };\n\n  const isClerkLoaded = !!(clerk.loaded && user);\n\n  const memberships = usePagesOrInfinite<\n    GetUserOrganizationMembershipParams,\n    ClerkPaginatedResponse<OrganizationMembershipResource>\n  >(\n    userMembershipsParams || {},\n    user?.getOrganizationMemberships,\n    {\n      keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n      infinite: userMembershipsSafeValues.infinite,\n      enabled: !!userMembershipsParams,\n    },\n    {\n      type: 'userMemberships',\n      userId: user?.id,\n    },\n  );\n\n  const invitations = usePagesOrInfinite<\n    GetUserOrganizationInvitationsParams,\n    ClerkPaginatedResponse<UserOrganizationInvitationResource>\n  >(\n    {\n      ...userInvitationsParams,\n    },\n    user?.getOrganizationInvitations,\n    {\n      keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n      infinite: userInvitationsSafeValues.infinite,\n      enabled: !!userInvitationsParams,\n    },\n    {\n      type: 'userInvitations',\n      userId: user?.id,\n    },\n  );\n\n  const suggestions = usePagesOrInfinite<\n    GetUserOrganizationSuggestionsParams,\n    ClerkPaginatedResponse<OrganizationSuggestionResource>\n  >(\n    {\n      ...userSuggestionsParams,\n    },\n    user?.getOrganizationSuggestions,\n    {\n      keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n      infinite: userSuggestionsSafeValues.infinite,\n      enabled: !!userSuggestionsParams,\n    },\n    {\n      type: 'userSuggestions',\n      userId: user?.id,\n    },\n  );\n\n  // TODO: Properly check for SSR user values\n  if (!isClerkLoaded) {\n    return {\n      isLoaded: false,\n      createOrganization: undefined,\n      setActive: undefined,\n      userMemberships: undefinedPaginatedResource,\n      userInvitations: undefinedPaginatedResource,\n      userSuggestions: undefinedPaginatedResource,\n    };\n  }\n\n  return {\n    isLoaded: isClerkLoaded,\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n    userMemberships: memberships,\n    userInvitations: invitations,\n    userSuggestions: suggestions,\n  };\n};\n","import React from 'react';\n\nexport const useSafeLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n","import type { UseSessionReturn } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useSessionContext } from '../contexts';\n\ntype UseSession = () => UseSessionReturn;\n\n/**\n * Returns the current auth state and if a session exists, the session object.\n *\n * Until Clerk loads and initializes, `isLoaded` will be set to `false`.\n * Once Clerk loads, `isLoaded` will be set to `true`, and you can\n * safely access `isSignedIn` state and `session`.\n *\n * @example\n * A simple example:\n *\n * import { useSession } from '@clerk/clerk-react'\n *\n * function Hello() {\n *   const { isSignedIn, session } = useSession();\n *   if(!isSignedIn) {\n *     return null;\n *   }\n *   return <div>{session.updatedAt}</div>\n * }\n */\nexport const useSession: UseSession = () => {\n  useAssertWrappedByClerkProvider('useSession');\n\n  const session = useSessionContext();\n\n  if (session === undefined) {\n    return { isLoaded: false, isSignedIn: undefined, session: undefined };\n  }\n\n  if (session === null) {\n    return { isLoaded: true, isSignedIn: false, session: null };\n  }\n\n  return { isLoaded: true, isSignedIn: true, session };\n};\n","import type { UseSessionListReturn } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext, useClientContext } from '../contexts';\n\ntype UseSessionList = () => UseSessionListReturn;\n\nexport const useSessionList: UseSessionList = () => {\n  useAssertWrappedByClerkProvider('useSessionList');\n\n  const isomorphicClerk = useClerkInstanceContext();\n  const client = useClientContext();\n\n  if (!client) {\n    return { isLoaded: false, sessions: undefined, setActive: undefined };\n  }\n\n  return {\n    isLoaded: true,\n    sessions: client.sessions,\n    setActive: isomorphicClerk.setActive,\n  };\n};\n","import type { UseUserReturn } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useUserContext } from '../contexts';\n\n/**\n * Returns the current auth state and if a user is signed in, the user object.\n *\n * Until Clerk loads and initializes, `isLoaded` will be set to `false`.\n * Once Clerk loads, `isLoaded` will be set to `true`, and you can\n * safely access `isSignedIn` state and `user`.\n *\n * @example\n * A simple example:\n *\n * import { useUser } from '@clerk/clerk-react'\n *\n * function Hello() {\n *   const { isSignedIn, user } = useUser();\n *   if(!isSignedIn) {\n *     return null;\n *   }\n *   return <div>Hello, {user.firstName}</div>\n * }\n */\nexport function useUser(): UseUserReturn {\n  useAssertWrappedByClerkProvider('useUser');\n\n  const user = useUserContext();\n\n  if (user === undefined) {\n    return { isLoaded: false, isSignedIn: undefined, user: undefined };\n  }\n\n  if (user === null) {\n    return { isLoaded: true, isSignedIn: false, user: null };\n  }\n\n  return { isLoaded: true, isSignedIn: true, user };\n}\n","import type { LoadedClerk } from '@clerk/types';\n\nimport { useAssertWrappedByClerkProvider, useClerkInstanceContext } from '../contexts';\n\nexport const useClerk = (): LoadedClerk => {\n  useAssertWrappedByClerkProvider('useClerk');\n  return useClerkInstanceContext();\n};\n","import { dequal as deepEqual } from 'dequal';\nimport React from 'react';\n\ntype UseMemoFactory<T> = () => T;\ntype UseMemoDependencyArray = Exclude<Parameters<typeof React.useMemo>[1], 'undefined'>;\ntype UseDeepEqualMemo = <T>(factory: UseMemoFactory<T>, dependencyArray: UseMemoDependencyArray) => T;\n\nconst useDeepEqualMemoize = <T>(value: T) => {\n  const ref = React.useRef<T>(value);\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n  return React.useMemo(() => ref.current, [ref.current]);\n};\n\nexport const useDeepEqualMemo: UseDeepEqualMemo = (factory, dependencyArray) => {\n  return React.useMemo(factory, useDeepEqualMemoize(dependencyArray));\n};\n\nexport const isDeeplyEqual = deepEqual;\n","import type { Clerk } from '@clerk/types';\nimport { useMemo, useRef } from 'react';\n\nimport { validateReverificationConfig } from '../../authorization';\nimport { isReverificationHint, reverificationError } from '../../authorization-errors';\nimport { ClerkRuntimeError, isClerkAPIResponseError, isClerkRuntimeError } from '../../error';\nimport { createDeferredPromise } from '../../utils/createDeferredPromise';\nimport { useClerk } from './useClerk';\nimport { useSafeLayoutEffect } from './useSafeLayoutEffect';\n\nconst CLERK_API_REVERIFICATION_ERROR_CODE = 'session_reverification_required';\n\nasync function resolveResult<T>(result: Promise<T> | T): Promise<T | ReturnType<typeof reverificationError>> {\n  try {\n    const r = await result;\n    if (r instanceof Response) {\n      return r.json();\n    }\n    return r;\n  } catch (e) {\n    // Treat fapi assurance as an assurance hint\n    if (isClerkAPIResponseError(e) && e.errors.find(({ code }) => code === CLERK_API_REVERIFICATION_ERROR_CODE)) {\n      return reverificationError();\n    }\n\n    // rethrow\n    throw e;\n  }\n}\n\ntype ExcludeClerkError<T, P> = T extends { clerk_error: any } ? (P extends { throwOnCancel: true } ? never : null) : T;\n\ntype UseReverificationOptions = {\n  onCancel?: () => void;\n  throwOnCancel?: boolean;\n};\n\ntype CreateReverificationHandlerParams = UseReverificationOptions & {\n  openUIComponent: Clerk['__internal_openReverification'];\n};\n\nfunction createReverificationHandler(params: CreateReverificationHandlerParams) {\n  function assertReverification<Fetcher extends (...args: any[]) => Promise<any> | undefined>(\n    fetcher: Fetcher,\n  ): (\n    ...args: Parameters<Fetcher>\n  ) => Promise<ExcludeClerkError<Awaited<ReturnType<Fetcher>>, Parameters<Fetcher>[1]>> {\n    return (async (...args: Parameters<Fetcher>) => {\n      let result = await resolveResult(fetcher(...args));\n\n      if (isReverificationHint(result)) {\n        /**\n         * Create a promise\n         */\n        const resolvers = createDeferredPromise();\n\n        const isValidMetadata = validateReverificationConfig(result.clerk_error.metadata?.reverification);\n\n        /**\n         * On success resolve the pending promise\n         * On cancel reject the pending promise\n         */\n        params.openUIComponent?.({\n          level: isValidMetadata ? isValidMetadata().level : undefined,\n          afterVerification() {\n            resolvers.resolve(true);\n          },\n          afterVerificationCancelled() {\n            resolvers.reject(\n              new ClerkRuntimeError('User cancelled attempted verification', {\n                code: 'reverification_cancelled',\n              }),\n            );\n          },\n        });\n\n        try {\n          /**\n           * Wait until the promise from above have been resolved or rejected\n           */\n          await resolvers.promise;\n        } catch (e) {\n          if (params.onCancel) {\n            params.onCancel();\n          }\n\n          if (isClerkRuntimeError(e) && e.code === 'reverification_cancelled' && params.throwOnCancel) {\n            throw e;\n          }\n\n          return null;\n        }\n\n        /**\n         * After the promise resolved successfully try the original request one more time\n         */\n        result = await resolveResult(fetcher(...args));\n      }\n\n      return result;\n    }) as ExcludeClerkError<Awaited<ReturnType<Fetcher>>, Parameters<Fetcher>[1]>;\n  }\n\n  return assertReverification;\n}\n\ntype UseReverificationResult<\n  Fetcher extends (...args: any[]) => Promise<any> | undefined,\n  Options extends UseReverificationOptions,\n> = readonly [(...args: Parameters<Fetcher>) => Promise<ExcludeClerkError<Awaited<ReturnType<Fetcher>>, Options>>];\n\n/**\n * Receives a fetcher async function and returned an enhanced fetcher that automatically handles the reverification flow\n * by displaying a prebuilt UI component when the request from the fetcher fails with a reverification error response.\n *\n * While the UI component is displayed the promise is still pending.\n * On success: the original request is retried one more time.\n * On error:\n * (1) by default the fetcher will return `null` and the `onCancel` callback will be executed.\n * (2) when `throwOnCancel: true` instead of returning null, the returned fetcher will throw a `ClerkRuntimeError`.\n *\n * @example\n * A simple example:\n *\n * function Hello() {\n *   const [fetchBalance] = useReverification(()=> fetch('/transfer-balance',{method:\"POST\"}));\n *   return <button onClick={fetchBalance}>...</button>\n * }\n */\nfunction useReverification<\n  Fetcher extends (...args: any[]) => Promise<any> | undefined,\n  Options extends UseReverificationOptions,\n>(fetcher: Fetcher, options?: Options): UseReverificationResult<Fetcher, Options> {\n  const { __internal_openReverification } = useClerk();\n  const fetcherRef = useRef(fetcher);\n  const optionsRef = useRef(options);\n\n  const handleReverification = useMemo(() => {\n    const handler = createReverificationHandler({\n      openUIComponent: __internal_openReverification,\n      ...optionsRef.current,\n    })(fetcherRef.current);\n    return [handler] as const;\n  }, [__internal_openReverification, fetcherRef.current, optionsRef.current]);\n\n  // Keep fetcher and options ref in sync\n  useSafeLayoutEffect(() => {\n    fetcherRef.current = fetcher;\n    optionsRef.current = options;\n  });\n\n  return handleReverification;\n}\n\nexport { useReverification };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}