{"ast":null,"code":"// import {\n//   SignedIn,\n//   SignedOut,\n//   SignInButton,\n//   UserButton,\n//   useUser,\n// } from \"@clerk/clerk-react\";\n// import AdminPanel from \"./components/AdminPanel\";\n// import ProtectedRoute from \"./ProtectedRoute\";\n// import NotAuthorized from \"./components/NotAuthorized\";\n// import LandingPage from \"./components/LandingPage\";\n// import UserPanel from \"./components/UserPanel\";\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   useNavigate,\n//   useLocation,\n// } from \"react-router-dom\";\n// import { useEffect } from \"react\";\n// import CartPage from \"./components/CartPage\";\n// // const PUBLISHABLE_KEY = process.env.REACT_APP_CLERK_PUBLISHABLE_KEY;\n// export default function Login() {\n//   const { user, isLoaded, isSignedIn } = useUser();\n//   const navigate = useNavigate();\n//   const location = useLocation();\n//   useEffect(() => {\n//     // Redirect to '/user' after login only if the user is at '/'\n//     if (isSignedIn && location.pathname === \"/\") {\n//       navigate(\"/user\");\n//     }\n//   }, [isSignedIn, location.pathname, navigate]);\n//   return (\n//     <>\n//       <header>\n//         <SignedOut>{/* <SignInButton>Sign In</SignInButton> */}</SignedOut>\n//         <SignedIn>{/* <UserButton /> */}</SignedIn>\n//         {/* Routes definition */}\n//         <Routes>\n//           <Route path=\"not-authorized\" element={<NotAuthorized />} />\n//           <Route path=\"/\" element={<LandingPage />} />\n//           <Route path=\"/user\" element={<UserPanel />} />\n//           <Route path=\"/cart\" element={<CartPage />} />\n//           <Route\n//             path=\"/admin\"\n//             element={\n//               <ProtectedRoute requiredRole=\"admin\" redirectTo=\"/not-authorized\">\n//                 <AdminPanel />\n//               </ProtectedRoute>\n//             }\n//           />\n//         </Routes>\n//       </header>\n//     </>\n//   );\n// }\nimport{SignedIn,SignedOut,useUser}from\"@clerk/clerk-react\";import AdminPanel from\"./components/AdminPanel\";import ProtectedRoute from\"./ProtectedRoute\";import NotAuthorized from\"./components/NotAuthorized\";import LandingPage from\"./components/LandingPage\";import UserPanel from\"./components/UserPanel\";import SuccessPage from\"./components/SuccessPage\";import CancelPage from\"./components/CancelPage\";import\"@fortawesome/fontawesome-free/css/all.css\";import{BrowserRouter as Router,Routes,Route,useNavigate,useLocation}from\"react-router-dom\";import{useEffect}from\"react\";import CartPage from\"./components/CartPage\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";export default function Login(){const{user,isLoaded,isSignedIn}=useUser();const navigate=useNavigate();const location=useLocation();useEffect(()=>{if(isLoaded&&isSignedIn){var _user$publicMetadata;// Check user's role from metadata\nconst role=(_user$publicMetadata=user.publicMetadata)===null||_user$publicMetadata===void 0?void 0:_user$publicMetadata.role;if(role===\"admin\"){// Redirect admin users to '/admin'\nnavigate(\"/admin\");}else if(location.pathname===\"/\"){// Redirect other signed-in users to '/user' if on '/'\nnavigate(\"/user\");}}},[isLoaded,isSignedIn,user,location.pathname,navigate]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"header\",{children:[/*#__PURE__*/_jsx(SignedOut,{}),/*#__PURE__*/_jsx(SignedIn,{}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"not-authorized\",element:/*#__PURE__*/_jsx(NotAuthorized,{})}),/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(LandingPage,{})}),/*#__PURE__*/_jsx(Route,{path:\"/user\",element:/*#__PURE__*/_jsx(UserPanel,{})}),/*#__PURE__*/_jsx(Route,{path:\"/cart\",element:/*#__PURE__*/_jsx(CartPage,{})}),/*#__PURE__*/_jsx(Route,{path:\"/success\",element:/*#__PURE__*/_jsx(SuccessPage,{})}),/*#__PURE__*/_jsx(Route,{path:\"/cancel\",element:/*#__PURE__*/_jsx(CancelPage,{})}),/*#__PURE__*/_jsx(Route,{path:\"/admin\",element:/*#__PURE__*/_jsx(ProtectedRoute,{requiredRole:\"admin\",redirectTo:\"/not-authorized\",children:/*#__PURE__*/_jsx(AdminPanel,{})})})]})]})});}","map":{"version":3,"names":["SignedIn","SignedOut","useUser","AdminPanel","ProtectedRoute","NotAuthorized","LandingPage","UserPanel","SuccessPage","CancelPage","BrowserRouter","Router","Routes","Route","useNavigate","useLocation","useEffect","CartPage","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Login","user","isLoaded","isSignedIn","navigate","location","_user$publicMetadata","role","publicMetadata","pathname","children","path","element","requiredRole","redirectTo"],"sources":["C:/Users/Abdullah Usama/Desktop/we_project/frontend/src/App.js"],"sourcesContent":["// import {\n//   SignedIn,\n//   SignedOut,\n//   SignInButton,\n//   UserButton,\n//   useUser,\n// } from \"@clerk/clerk-react\";\n\n// import AdminPanel from \"./components/AdminPanel\";\n// import ProtectedRoute from \"./ProtectedRoute\";\n// import NotAuthorized from \"./components/NotAuthorized\";\n// import LandingPage from \"./components/LandingPage\";\n// import UserPanel from \"./components/UserPanel\";\n\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   useNavigate,\n//   useLocation,\n// } from \"react-router-dom\";\n// import { useEffect } from \"react\";\n// import CartPage from \"./components/CartPage\";\n\n// // const PUBLISHABLE_KEY = process.env.REACT_APP_CLERK_PUBLISHABLE_KEY;\n\n// export default function Login() {\n//   const { user, isLoaded, isSignedIn } = useUser();\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   useEffect(() => {\n//     // Redirect to '/user' after login only if the user is at '/'\n//     if (isSignedIn && location.pathname === \"/\") {\n//       navigate(\"/user\");\n//     }\n//   }, [isSignedIn, location.pathname, navigate]);\n//   return (\n//     <>\n//       <header>\n//         <SignedOut>{/* <SignInButton>Sign In</SignInButton> */}</SignedOut>\n//         <SignedIn>{/* <UserButton /> */}</SignedIn>\n//         {/* Routes definition */}\n//         <Routes>\n//           <Route path=\"not-authorized\" element={<NotAuthorized />} />\n//           <Route path=\"/\" element={<LandingPage />} />\n//           <Route path=\"/user\" element={<UserPanel />} />\n//           <Route path=\"/cart\" element={<CartPage />} />\n//           <Route\n//             path=\"/admin\"\n//             element={\n//               <ProtectedRoute requiredRole=\"admin\" redirectTo=\"/not-authorized\">\n//                 <AdminPanel />\n//               </ProtectedRoute>\n//             }\n//           />\n//         </Routes>\n//       </header>\n//     </>\n//   );\n// }\n\nimport { SignedIn, SignedOut, useUser } from \"@clerk/clerk-react\";\n\nimport AdminPanel from \"./components/AdminPanel\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport NotAuthorized from \"./components/NotAuthorized\";\nimport LandingPage from \"./components/LandingPage\";\nimport UserPanel from \"./components/UserPanel\";\nimport SuccessPage from \"./components/SuccessPage\";\nimport CancelPage from \"./components/CancelPage\";\n\nimport \"@fortawesome/fontawesome-free/css/all.css\";\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  useNavigate,\n  useLocation,\n} from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport CartPage from \"./components/CartPage\";\n\nexport default function Login() {\n  const { user, isLoaded, isSignedIn } = useUser();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    if (isLoaded && isSignedIn) {\n      // Check user's role from metadata\n      const role = user.publicMetadata?.role;\n\n      if (role === \"admin\") {\n        // Redirect admin users to '/admin'\n        navigate(\"/admin\");\n      } else if (location.pathname === \"/\") {\n        // Redirect other signed-in users to '/user' if on '/'\n        navigate(\"/user\");\n      }\n    }\n  }, [isLoaded, isSignedIn, user, location.pathname, navigate]);\n\n  return (\n    <>\n      <header>\n        <SignedOut>{/* <SignInButton>Sign In</SignInButton> */}</SignedOut>\n        <SignedIn>{/* <UserButton /> */}</SignedIn>\n        {/* Routes definition */}\n        <Routes>\n          <Route path=\"not-authorized\" element={<NotAuthorized />} />\n          <Route path=\"/\" element={<LandingPage />} />\n          <Route path=\"/user\" element={<UserPanel />} />\n          <Route path=\"/cart\" element={<CartPage />} />\n          <Route path=\"/success\" element={<SuccessPage />} />\n          <Route path=\"/cancel\" element={<CancelPage />} />\n          <Route\n            path=\"/admin\"\n            element={\n              <ProtectedRoute requiredRole=\"admin\" redirectTo=\"/not-authorized\">\n                <AdminPanel />\n              </ProtectedRoute>\n            }\n          />\n        </Routes>\n      </header>\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}