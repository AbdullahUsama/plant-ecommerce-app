{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Abdullah Usama\\\\Desktop\\\\we_project\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import {\n//   SignedIn,\n//   SignedOut,\n//   SignInButton,\n//   UserButton,\n//   useUser,\n// } from \"@clerk/clerk-react\";\n\n// import AdminPanel from \"./components/AdminPanel\";\n// import ProtectedRoute from \"./ProtectedRoute\";\n// import NotAuthorized from \"./components/NotAuthorized\";\n// import LandingPage from \"./components/LandingPage\";\n// import UserPanel from \"./components/UserPanel\";\n\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   useNavigate,\n//   useLocation,\n// } from \"react-router-dom\";\n// import { useEffect } from \"react\";\n// import CartPage from \"./components/CartPage\";\n\n// // const PUBLISHABLE_KEY = process.env.REACT_APP_CLERK_PUBLISHABLE_KEY;\n\n// export default function Login() {\n//   const { user, isLoaded, isSignedIn } = useUser();\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   useEffect(() => {\n//     // Redirect to '/user' after login only if the user is at '/'\n//     if (isSignedIn && location.pathname === \"/\") {\n//       navigate(\"/user\");\n//     }\n//   }, [isSignedIn, location.pathname, navigate]);\n//   return (\n//     <>\n//       <header>\n//         <SignedOut>{/* <SignInButton>Sign In</SignInButton> */}</SignedOut>\n//         <SignedIn>{/* <UserButton /> */}</SignedIn>\n//         {/* Routes definition */}\n//         <Routes>\n//           <Route path=\"not-authorized\" element={<NotAuthorized />} />\n//           <Route path=\"/\" element={<LandingPage />} />\n//           <Route path=\"/user\" element={<UserPanel />} />\n//           <Route path=\"/cart\" element={<CartPage />} />\n//           <Route\n//             path=\"/admin\"\n//             element={\n//               <ProtectedRoute requiredRole=\"admin\" redirectTo=\"/not-authorized\">\n//                 <AdminPanel />\n//               </ProtectedRoute>\n//             }\n//           />\n//         </Routes>\n//       </header>\n//     </>\n//   );\n// }\n\nimport { SignedIn, SignedOut, useUser } from \"@clerk/clerk-react\";\nimport AdminPanel from \"./components/AdminPanel\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport NotAuthorized from \"./components/NotAuthorized\";\nimport LandingPage from \"./components/LandingPage\";\nimport UserPanel from \"./components/UserPanel\";\nimport { BrowserRouter as Router, Routes, Route, useNavigate, useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport CartPage from \"./components/CartPage\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Login() {\n  _s();\n  const {\n    user,\n    isLoaded,\n    isSignedIn\n  } = useUser();\n  const navigate = useNavigate();\n  const location = useLocation();\n  useEffect(() => {\n    if (isLoaded && isSignedIn) {\n      var _user$publicMetadata;\n      // Check user's role from metadata\n      const role = (_user$publicMetadata = user.publicMetadata) === null || _user$publicMetadata === void 0 ? void 0 : _user$publicMetadata.role;\n      if (role === \"admin\") {\n        // Redirect admin users to '/admin'\n        navigate(\"/admin\");\n      } else if (location.pathname === \"/\") {\n        // Redirect other signed-in users to '/user' if on '/'\n        navigate(\"/user\");\n      }\n    }\n  }, [isLoaded, isSignedIn, user, location.pathname, navigate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(SignedOut, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SignedIn, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"not-authorized\",\n          element: /*#__PURE__*/_jsxDEV(NotAuthorized, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 49\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(LandingPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/user\",\n          element: /*#__PURE__*/_jsxDEV(UserPanel, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/cart\",\n          element: /*#__PURE__*/_jsxDEV(CartPage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/admin\",\n          element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n            requiredRole: \"admin\",\n            redirectTo: \"/not-authorized\",\n            children: /*#__PURE__*/_jsxDEV(AdminPanel, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(Login, \"wcusFfflCmK66JpXAduVFpVWd08=\", false, function () {\n  return [useUser, useNavigate, useLocation];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["SignedIn","SignedOut","useUser","AdminPanel","ProtectedRoute","NotAuthorized","LandingPage","UserPanel","BrowserRouter","Router","Routes","Route","useNavigate","useLocation","useEffect","CartPage","jsxDEV","_jsxDEV","Fragment","_Fragment","Login","_s","user","isLoaded","isSignedIn","navigate","location","_user$publicMetadata","role","publicMetadata","pathname","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","requiredRole","redirectTo","_c","$RefreshReg$"],"sources":["C:/Users/Abdullah Usama/Desktop/we_project/frontend/src/App.js"],"sourcesContent":["// import {\n//   SignedIn,\n//   SignedOut,\n//   SignInButton,\n//   UserButton,\n//   useUser,\n// } from \"@clerk/clerk-react\";\n\n// import AdminPanel from \"./components/AdminPanel\";\n// import ProtectedRoute from \"./ProtectedRoute\";\n// import NotAuthorized from \"./components/NotAuthorized\";\n// import LandingPage from \"./components/LandingPage\";\n// import UserPanel from \"./components/UserPanel\";\n\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n//   useNavigate,\n//   useLocation,\n// } from \"react-router-dom\";\n// import { useEffect } from \"react\";\n// import CartPage from \"./components/CartPage\";\n\n// // const PUBLISHABLE_KEY = process.env.REACT_APP_CLERK_PUBLISHABLE_KEY;\n\n// export default function Login() {\n//   const { user, isLoaded, isSignedIn } = useUser();\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   useEffect(() => {\n//     // Redirect to '/user' after login only if the user is at '/'\n//     if (isSignedIn && location.pathname === \"/\") {\n//       navigate(\"/user\");\n//     }\n//   }, [isSignedIn, location.pathname, navigate]);\n//   return (\n//     <>\n//       <header>\n//         <SignedOut>{/* <SignInButton>Sign In</SignInButton> */}</SignedOut>\n//         <SignedIn>{/* <UserButton /> */}</SignedIn>\n//         {/* Routes definition */}\n//         <Routes>\n//           <Route path=\"not-authorized\" element={<NotAuthorized />} />\n//           <Route path=\"/\" element={<LandingPage />} />\n//           <Route path=\"/user\" element={<UserPanel />} />\n//           <Route path=\"/cart\" element={<CartPage />} />\n//           <Route\n//             path=\"/admin\"\n//             element={\n//               <ProtectedRoute requiredRole=\"admin\" redirectTo=\"/not-authorized\">\n//                 <AdminPanel />\n//               </ProtectedRoute>\n//             }\n//           />\n//         </Routes>\n//       </header>\n//     </>\n//   );\n// }\n\nimport { SignedIn, SignedOut, useUser } from \"@clerk/clerk-react\";\n\nimport AdminPanel from \"./components/AdminPanel\";\nimport ProtectedRoute from \"./ProtectedRoute\";\nimport NotAuthorized from \"./components/NotAuthorized\";\nimport LandingPage from \"./components/LandingPage\";\nimport UserPanel from \"./components/UserPanel\";\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  useNavigate,\n  useLocation,\n} from \"react-router-dom\";\nimport { useEffect } from \"react\";\nimport CartPage from \"./components/CartPage\";\n\nexport default function Login() {\n  const { user, isLoaded, isSignedIn } = useUser();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  useEffect(() => {\n    if (isLoaded && isSignedIn) {\n      // Check user's role from metadata\n      const role = user.publicMetadata?.role;\n\n      if (role === \"admin\") {\n        // Redirect admin users to '/admin'\n        navigate(\"/admin\");\n      } else if (location.pathname === \"/\") {\n        // Redirect other signed-in users to '/user' if on '/'\n        navigate(\"/user\");\n      }\n    }\n  }, [isLoaded, isSignedIn, user, location.pathname, navigate]);\n\n  return (\n    <>\n      <header>\n        <SignedOut>{/* <SignInButton>Sign In</SignInButton> */}</SignedOut>\n        <SignedIn>{/* <UserButton /> */}</SignedIn>\n        {/* Routes definition */}\n        <Routes>\n          <Route path=\"not-authorized\" element={<NotAuthorized />} />\n          <Route path=\"/\" element={<LandingPage />} />\n          <Route path=\"/user\" element={<UserPanel />} />\n          <Route path=\"/cart\" element={<CartPage />} />\n          <Route\n            path=\"/admin\"\n            element={\n              <ProtectedRoute requiredRole=\"admin\" redirectTo=\"/not-authorized\">\n                <AdminPanel />\n              </ProtectedRoute>\n            }\n          />\n        </Routes>\n      </header>\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}